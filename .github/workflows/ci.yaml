name: CI. Should run after every push to this repo

on: [push, pull_request]

jobs:
  Build-docker-image:
    runs-on: ubuntu-latest
    outputs:
      docker-tag: ${{ steps.set-docker-tag.outputs.docker-tag }}
    steps:
#      - name: Set up dependencies
#        run: docker --version
#
#      - name: Pull Docker image
#        run: |
#          docker pull cr.yandex/crp37i9qfn16d69aaulp/conference-app:latest
#
#      - name: Clone repository
#        uses: actions/checkout@v4
#
#      - name: Run codegen
#        run: make gen
#
#      - name: Build service and tests
#        run: |
#          docker run -t -v .:/code cr.yandex/crp37i9qfn16d69aaulp/conference-app:latest /bin/bash /code/ci/run_build.sh
#
#      - name: Build docker image
#        run: |
#          export DOCKER_TAG=cr.yandex/crp37i9qfn16d69aaulp/conference_app:github_run_${GITHUB_RUN_ID}
#          docker build . --network=host -f docker/release/Dockerfile --tag ${DOCKER_TAG}
#
#      - name: Upload docker image
#        run: |
#          export DOCKER_TAG=cr.yandex/crp37i9qfn16d69aaulp/conference_app:github_run_${GITHUB_RUN_ID}
#          docker push ${DOCKER_TAG}
#
#      - name: Set docker tag
#        id: set-docker-tag
#        run: |
#          export DOCKER_TAG=cr.yandex/crp37i9qfn16d69aaulp/conference_app:github_run_${GITHUB_RUN_ID}
#          echo "docker-tag=$DOCKER_TAG" >> $GITHUB_OUTPUT

      - name: Set docker tag
        id: set-docker-tag
        run: |
          export DOCKER_TAG=cr.yandex/crp37i9qfn16d69aaulp/conference_app:github_run_12054193152
          echo "docker-tag=$DOCKER_TAG" >> $GITHUB_OUTPUT

  Run-tests:
    runs-on: ubuntu-latest
    needs: Build-docker-image
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Pull service image
        run: |
          docker pull "${{ needs.Build-docker-image.outputs.docker-tag }}"

      - name: Rename image
        run: |
          docker tag ${{ needs.Build-docker-image.outputs.docker-tag }} inttest_image

      - name: Run unittests
        run: >
          docker run -t -v ./report:/report inttest_image /usr/bin/service/pg_service_template_unittest --gtest_output=xml:/report/report.xml

      - name: Stop all containers
        run: docker stop $(docker ps -a -q)

      - name: Save unittest report
        uses: actions/upload-artifact@v4
        with:
          name: unittest_report
          path: ./report/report.xml
          retention-days: 3

      - name: Pull postgres image
        run: docker pull postgres:12

      - name: Run integration tests
        run: docker compose -f docker/inttest/docker-compose.yaml run service || true

      - name: Stop all containers
        run: docker stop $(docker ps -a -q)

      - name: Save inttest report
        uses: actions/upload-artifact@v4
        with:
          name: inttest_report
          path: ./docker/inttest/report/report_inttest.xml
          retention-days: 3

      - name: Run e2e tests
        run: docker compose -f docker/e2e/docker-compose.yaml run service --build

      - name: Stop all containers
        run: docker stop $(docker ps -a -q)

      - name: Save e2e report
        uses: actions/upload-artifact@v4
        with:
          name: e2e_report
          path: ./docker/e2e/report/report_e2e.xml
          retention-days: 3

  Generate-report:
    runs-on: ubuntu-latest
    needs: Run-tests
    if: always()
    steps:
      - name: Download unittest
        uses: actions/download-artifact@v4
        with:
          name: unittest_report
          path: ./unittest

      - name: Download inttest
        uses: actions/download-artifact@v4
        with:
          name: inttest_report
          path: ./inttest

      - name: Download e2e
        uses: actions/download-artifact@v4
        with:
          name: e2e_report
          path: ./e2e

      - name: Merge artifacts
        run: |
          mkdir -p ./allure-results
          mv unittest/* ./allure-results/
          mv e2e/* ./allure-results/
          mv inttest/* ./allure-results/
          ls -al ./allure-results

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Download Allure CLI
        run: |
          curl -o allure-commandline.zip -L "https://github.com/allure-framework/allure2/releases/download/2.20.1/allure-2.20.1.zip"
          unzip allure-commandline.zip -d allure-commandline
          export PATH=$PATH:$GITHUB_WORKSPACE/allure-commandline/allure-2.20.1/bin

      - name: Generate report
        run: |
          allure-commandline/allure-2.20.1/bin/allure generate allure-results --clean -o allure-report

      - name: Upload to pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report
